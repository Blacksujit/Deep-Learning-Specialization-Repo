{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":896,"sourceType":"datasetVersion","datasetId":435}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-03T20:46:10.310701Z","iopub.execute_input":"2024-12-03T20:46:10.311287Z","iopub.status.idle":"2024-12-03T20:46:10.319361Z","shell.execute_reply.started":"2024-12-03T20:46:10.311224Z","shell.execute_reply":"2024-12-03T20:46:10.317866Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Import necessary libraries\n!pip install moviepy\n# Installing necessary libraries\n!pip install moviepy\n!pip install gradio\n!pip install langchain\n!pip install transformers\n!pip install pandas\n!pip install numpy \n!pip install langchain_community\n!pip install moviepy\n!pip install openai\n!pip install os\n!pip install numpy\n!pip install dateime\n!pip install os\n!pip install diffusers\n!pip install torch\n!pip install editor\n!pip install dalle","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T20:43:29.734532Z","iopub.execute_input":"2024-12-03T20:43:29.735042Z","iopub.status.idle":"2024-12-03T20:46:10.307614Z","shell.execute_reply.started":"2024-12-03T20:43:29.735002Z","shell.execute_reply":"2024-12-03T20:46:10.305987Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: moviepy in /opt/conda/lib/python3.10/site-packages (2.1.1)\nRequirement already satisfied: decorator<6.0,>=4.0.2 in /opt/conda/lib/python3.10/site-packages (from moviepy) (5.1.1)\nRequirement already satisfied: imageio<3.0,>=2.5 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.34.1)\nRequirement already satisfied: imageio_ffmpeg>=0.2.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (0.5.1)\nRequirement already satisfied: numpy>=1.25.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.26.4)\nRequirement already satisfied: proglog<=1.0.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (0.1.10)\nRequirement already satisfied: python-dotenv>=0.10 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.0.1)\nRequirement already satisfied: pillow<11.0,>=9.2.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (10.3.0)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from imageio_ffmpeg>=0.2.0->moviepy) (70.0.0)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from proglog<=1.0.0->moviepy) (4.66.4)\nRequirement already satisfied: moviepy in /opt/conda/lib/python3.10/site-packages (2.1.1)\nRequirement already satisfied: decorator<6.0,>=4.0.2 in /opt/conda/lib/python3.10/site-packages (from moviepy) (5.1.1)\nRequirement already satisfied: imageio<3.0,>=2.5 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.34.1)\nRequirement already satisfied: imageio_ffmpeg>=0.2.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (0.5.1)\nRequirement already satisfied: numpy>=1.25.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.26.4)\nRequirement already satisfied: proglog<=1.0.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (0.1.10)\nRequirement already satisfied: python-dotenv>=0.10 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.0.1)\nRequirement already satisfied: pillow<11.0,>=9.2.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (10.3.0)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from imageio_ffmpeg>=0.2.0->moviepy) (70.0.0)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from proglog<=1.0.0->moviepy) (4.66.4)\nRequirement already satisfied: gradio in /opt/conda/lib/python3.10/site-packages (5.7.1)\nRequirement already satisfied: aiofiles<24.0,>=22.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (22.1.0)\nRequirement already satisfied: anyio<5.0,>=3.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (4.4.0)\nRequirement already satisfied: fastapi<1.0,>=0.115.2 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.115.5)\nRequirement already satisfied: ffmpy in /opt/conda/lib/python3.10/site-packages (from gradio) (0.4.0)\nRequirement already satisfied: gradio-client==1.5.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (1.5.0)\nRequirement already satisfied: httpx>=0.24.1 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.27.0)\nRequirement already satisfied: huggingface-hub>=0.25.1 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.26.2)\nRequirement already satisfied: jinja2<4.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (3.1.4)\nRequirement already satisfied: markupsafe~=2.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.1.5)\nRequirement already satisfied: numpy<3.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (1.26.4)\nRequirement already satisfied: orjson~=3.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (3.10.4)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from gradio) (24.2)\nRequirement already satisfied: pandas<3.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.2.3)\nRequirement already satisfied: pillow<12.0,>=8.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (10.3.0)\nRequirement already satisfied: pydantic>=2.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.10.2)\nRequirement already satisfied: pydub in /opt/conda/lib/python3.10/site-packages (from gradio) (0.25.1)\nRequirement already satisfied: python-multipart==0.0.12 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.0.12)\nRequirement already satisfied: pyyaml<7.0,>=5.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (6.0.2)\nRequirement already satisfied: ruff>=0.2.2 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.8.1)\nRequirement already satisfied: safehttpx<1.0,>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.1.6)\nRequirement already satisfied: semantic-version~=2.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (2.10.0)\nRequirement already satisfied: starlette<1.0,>=0.40.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.41.3)\nRequirement already satisfied: tomlkit==0.12.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.12.0)\nRequirement already satisfied: typer<1.0,>=0.12 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.12.3)\nRequirement already satisfied: typing-extensions~=4.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (4.12.2)\nRequirement already satisfied: uvicorn>=0.14.0 in /opt/conda/lib/python3.10/site-packages (from gradio) (0.30.1)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from gradio-client==1.5.0->gradio) (2024.9.0)\nRequirement already satisfied: websockets<13.0,>=10.0 in /opt/conda/lib/python3.10/site-packages (from gradio-client==1.5.0->gradio) (12.0)\nRequirement already satisfied: idna>=2.8 in /opt/conda/lib/python3.10/site-packages (from anyio<5.0,>=3.0->gradio) (3.7)\nRequirement already satisfied: sniffio>=1.1 in /opt/conda/lib/python3.10/site-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\nRequirement already satisfied: exceptiongroup>=1.0.2 in /opt/conda/lib/python3.10/site-packages (from anyio<5.0,>=3.0->gradio) (1.2.0)\nRequirement already satisfied: certifi in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (2024.6.2)\nRequirement already satisfied: httpcore==1.* in /opt/conda/lib/python3.10/site-packages (from httpx>=0.24.1->gradio) (1.0.5)\nRequirement already satisfied: h11<0.15,>=0.13 in /opt/conda/lib/python3.10/site-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.25.1->gradio) (3.15.1)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.25.1->gradio) (2.32.3)\nRequirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.25.1->gradio) (4.66.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas<3.0,>=1.0->gradio) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas<3.0,>=1.0->gradio) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas<3.0,>=1.0->gradio) (2024.1)\nRequirement already satisfied: annotated-types>=0.6.0 in /opt/conda/lib/python3.10/site-packages (from pydantic>=2.0->gradio) (0.7.0)\nRequirement already satisfied: pydantic-core==2.27.1 in /opt/conda/lib/python3.10/site-packages (from pydantic>=2.0->gradio) (2.27.1)\nRequirement already satisfied: click>=8.0.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0,>=0.12->gradio) (8.1.7)\nRequirement already satisfied: shellingham>=1.3.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\nRequirement already satisfied: rich>=10.11.0 in /opt/conda/lib/python3.10/site-packages (from typer<1.0,>=0.12->gradio) (13.7.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.16.0)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.18.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.25.1->gradio) (3.3.2)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.25.1->gradio) (1.26.18)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\nRequirement already satisfied: langchain in /opt/conda/lib/python3.10/site-packages (0.3.9)\nRequirement already satisfied: PyYAML>=5.3 in /opt/conda/lib/python3.10/site-packages (from langchain) (6.0.2)\nRequirement already satisfied: SQLAlchemy<3,>=1.4 in /opt/conda/lib/python3.10/site-packages (from langchain) (2.0.30)\nRequirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /opt/conda/lib/python3.10/site-packages (from langchain) (3.9.5)\nRequirement already satisfied: async-timeout<5.0.0,>=4.0.0 in /opt/conda/lib/python3.10/site-packages (from langchain) (4.0.3)\nRequirement already satisfied: langchain-core<0.4.0,>=0.3.21 in /opt/conda/lib/python3.10/site-packages (from langchain) (0.3.21)\nRequirement already satisfied: langchain-text-splitters<0.4.0,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from langchain) (0.3.2)\nRequirement already satisfied: langsmith<0.2.0,>=0.1.17 in /opt/conda/lib/python3.10/site-packages (from langchain) (0.1.147)\nRequirement already satisfied: numpy<2,>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from langchain) (1.26.4)\nRequirement already satisfied: pydantic<3.0.0,>=2.7.4 in /opt/conda/lib/python3.10/site-packages (from langchain) (2.10.2)\nRequirement already satisfied: requests<3,>=2 in /opt/conda/lib/python3.10/site-packages (from langchain) (2.32.3)\nRequirement already satisfied: tenacity!=8.4.0,<10,>=8.1.0 in /opt/conda/lib/python3.10/site-packages (from langchain) (8.3.0)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (6.0.5)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain) (1.9.4)\nRequirement already satisfied: jsonpatch<2.0,>=1.33 in /opt/conda/lib/python3.10/site-packages (from langchain-core<0.4.0,>=0.3.21->langchain) (1.33)\nRequirement already satisfied: packaging<25,>=23.2 in /opt/conda/lib/python3.10/site-packages (from langchain-core<0.4.0,>=0.3.21->langchain) (24.2)\nRequirement already satisfied: typing-extensions>=4.7 in /opt/conda/lib/python3.10/site-packages (from langchain-core<0.4.0,>=0.3.21->langchain) (4.12.2)\nRequirement already satisfied: httpx<1,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain) (0.27.0)\nRequirement already satisfied: orjson<4.0.0,>=3.9.14 in /opt/conda/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain) (3.10.4)\nRequirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.17->langchain) (1.0.0)\nRequirement already satisfied: annotated-types>=0.6.0 in /opt/conda/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.7.4->langchain) (0.7.0)\nRequirement already satisfied: pydantic-core==2.27.1 in /opt/conda/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.7.4->langchain) (2.27.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain) (2024.6.2)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from SQLAlchemy<3,>=1.4->langchain) (3.0.3)\nRequirement already satisfied: anyio in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain) (4.4.0)\nRequirement already satisfied: httpcore==1.* in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain) (1.0.5)\nRequirement already satisfied: sniffio in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain) (1.3.1)\nRequirement already satisfied: h11<0.15,>=0.13 in /opt/conda/lib/python3.10/site-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain) (0.14.0)\nRequirement already satisfied: jsonpointer>=1.9 in /opt/conda/lib/python3.10/site-packages (from jsonpatch<2.0,>=1.33->langchain-core<0.4.0,>=0.3.21->langchain) (2.4)\nRequirement already satisfied: exceptiongroup>=1.0.2 in /opt/conda/lib/python3.10/site-packages (from anyio->httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.17->langchain) (1.2.0)\nRequirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.46.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.15.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.26.2)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (24.2)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2024.5.15)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\nRequirement already satisfied: tokenizers<0.21,>=0.20 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.20.3)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.5)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.9.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.6.2)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.3)\nRequirement already satisfied: numpy>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from pandas) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\nRequirement already satisfied: langchain_community in /opt/conda/lib/python3.10/site-packages (0.3.9)\nRequirement already satisfied: PyYAML>=5.3 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (6.0.2)\nRequirement already satisfied: SQLAlchemy<3,>=1.4 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (2.0.30)\nRequirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (3.9.5)\nRequirement already satisfied: dataclasses-json<0.7,>=0.5.7 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (0.6.7)\nRequirement already satisfied: httpx-sse<0.5.0,>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (0.4.0)\nRequirement already satisfied: langchain<0.4.0,>=0.3.8 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (0.3.9)\nRequirement already satisfied: langchain-core<0.4.0,>=0.3.21 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (0.3.21)\nRequirement already satisfied: langsmith<0.2.0,>=0.1.125 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (0.1.147)\nRequirement already satisfied: numpy<2,>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (1.26.4)\nRequirement already satisfied: pydantic-settings<3.0.0,>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (2.6.1)\nRequirement already satisfied: requests<3,>=2 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (2.32.3)\nRequirement already satisfied: tenacity!=8.4.0,<10,>=8.1.0 in /opt/conda/lib/python3.10/site-packages (from langchain_community) (8.3.0)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (6.0.5)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (1.9.4)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (4.0.3)\nRequirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /opt/conda/lib/python3.10/site-packages (from dataclasses-json<0.7,>=0.5.7->langchain_community) (3.23.1)\nRequirement already satisfied: typing-inspect<1,>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from dataclasses-json<0.7,>=0.5.7->langchain_community) (0.9.0)\nRequirement already satisfied: langchain-text-splitters<0.4.0,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from langchain<0.4.0,>=0.3.8->langchain_community) (0.3.2)\nRequirement already satisfied: pydantic<3.0.0,>=2.7.4 in /opt/conda/lib/python3.10/site-packages (from langchain<0.4.0,>=0.3.8->langchain_community) (2.10.2)\nRequirement already satisfied: jsonpatch<2.0,>=1.33 in /opt/conda/lib/python3.10/site-packages (from langchain-core<0.4.0,>=0.3.21->langchain_community) (1.33)\nRequirement already satisfied: packaging<25,>=23.2 in /opt/conda/lib/python3.10/site-packages (from langchain-core<0.4.0,>=0.3.21->langchain_community) (24.2)\nRequirement already satisfied: typing-extensions>=4.7 in /opt/conda/lib/python3.10/site-packages (from langchain-core<0.4.0,>=0.3.21->langchain_community) (4.12.2)\nRequirement already satisfied: httpx<1,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.125->langchain_community) (0.27.0)\nRequirement already satisfied: orjson<4.0.0,>=3.9.14 in /opt/conda/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.125->langchain_community) (3.10.4)\nRequirement already satisfied: requests-toolbelt<2.0.0,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from langsmith<0.2.0,>=0.1.125->langchain_community) (1.0.0)\nRequirement already satisfied: python-dotenv>=0.21.0 in /opt/conda/lib/python3.10/site-packages (from pydantic-settings<3.0.0,>=2.4.0->langchain_community) (1.0.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain_community) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain_community) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain_community) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2->langchain_community) (2024.6.2)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from SQLAlchemy<3,>=1.4->langchain_community) (3.0.3)\nRequirement already satisfied: anyio in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.125->langchain_community) (4.4.0)\nRequirement already satisfied: httpcore==1.* in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.125->langchain_community) (1.0.5)\nRequirement already satisfied: sniffio in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.125->langchain_community) (1.3.1)\nRequirement already satisfied: h11<0.15,>=0.13 in /opt/conda/lib/python3.10/site-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.125->langchain_community) (0.14.0)\nRequirement already satisfied: jsonpointer>=1.9 in /opt/conda/lib/python3.10/site-packages (from jsonpatch<2.0,>=1.33->langchain-core<0.4.0,>=0.3.21->langchain_community) (2.4)\nRequirement already satisfied: annotated-types>=0.6.0 in /opt/conda/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.7.4->langchain<0.4.0,>=0.3.8->langchain_community) (0.7.0)\nRequirement already satisfied: pydantic-core==2.27.1 in /opt/conda/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.7.4->langchain<0.4.0,>=0.3.8->langchain_community) (2.27.1)\nRequirement already satisfied: mypy-extensions>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7,>=0.5.7->langchain_community) (1.0.0)\nRequirement already satisfied: exceptiongroup>=1.0.2 in /opt/conda/lib/python3.10/site-packages (from anyio->httpx<1,>=0.23.0->langsmith<0.2.0,>=0.1.125->langchain_community) (1.2.0)\nRequirement already satisfied: moviepy in /opt/conda/lib/python3.10/site-packages (2.1.1)\nRequirement already satisfied: decorator<6.0,>=4.0.2 in /opt/conda/lib/python3.10/site-packages (from moviepy) (5.1.1)\nRequirement already satisfied: imageio<3.0,>=2.5 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.34.1)\nRequirement already satisfied: imageio_ffmpeg>=0.2.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (0.5.1)\nRequirement already satisfied: numpy>=1.25.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.26.4)\nRequirement already satisfied: proglog<=1.0.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (0.1.10)\nRequirement already satisfied: python-dotenv>=0.10 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.0.1)\nRequirement already satisfied: pillow<11.0,>=9.2.0 in /opt/conda/lib/python3.10/site-packages (from moviepy) (10.3.0)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from imageio_ffmpeg>=0.2.0->moviepy) (70.0.0)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from proglog<=1.0.0->moviepy) (4.66.4)\nRequirement already satisfied: openai in /opt/conda/lib/python3.10/site-packages (1.56.1)\nRequirement already satisfied: anyio<5,>=3.5.0 in /opt/conda/lib/python3.10/site-packages (from openai) (4.4.0)\nRequirement already satisfied: distro<2,>=1.7.0 in /opt/conda/lib/python3.10/site-packages (from openai) (1.9.0)\nRequirement already satisfied: httpx<1,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from openai) (0.27.0)\nRequirement already satisfied: jiter<1,>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from openai) (0.8.0)\nRequirement already satisfied: pydantic<3,>=1.9.0 in /opt/conda/lib/python3.10/site-packages (from openai) (2.10.2)\nRequirement already satisfied: sniffio in /opt/conda/lib/python3.10/site-packages (from openai) (1.3.1)\nRequirement already satisfied: tqdm>4 in /opt/conda/lib/python3.10/site-packages (from openai) (4.66.4)\nRequirement already satisfied: typing-extensions<5,>=4.11 in /opt/conda/lib/python3.10/site-packages (from openai) (4.12.2)\nRequirement already satisfied: idna>=2.8 in /opt/conda/lib/python3.10/site-packages (from anyio<5,>=3.5.0->openai) (3.7)\nRequirement already satisfied: exceptiongroup>=1.0.2 in /opt/conda/lib/python3.10/site-packages (from anyio<5,>=3.5.0->openai) (1.2.0)\nRequirement already satisfied: certifi in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->openai) (2024.6.2)\nRequirement already satisfied: httpcore==1.* in /opt/conda/lib/python3.10/site-packages (from httpx<1,>=0.23.0->openai) (1.0.5)\nRequirement already satisfied: h11<0.15,>=0.13 in /opt/conda/lib/python3.10/site-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\nRequirement already satisfied: annotated-types>=0.6.0 in /opt/conda/lib/python3.10/site-packages (from pydantic<3,>=1.9.0->openai) (0.7.0)\nRequirement already satisfied: pydantic-core==2.27.1 in /opt/conda/lib/python3.10/site-packages (from pydantic<3,>=1.9.0->openai) (2.27.1)\n\u001b[31mERROR: Could not find a version that satisfies the requirement os (from versions: none)\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: No matching distribution found for os\u001b[0m\u001b[31m\n\u001b[0mRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\n\u001b[31mERROR: Could not find a version that satisfies the requirement dateime (from versions: none)\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: No matching distribution found for dateime\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: Could not find a version that satisfies the requirement os (from versions: none)\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: No matching distribution found for os\u001b[0m\u001b[31m\n\u001b[0mRequirement already satisfied: diffusers in /opt/conda/lib/python3.10/site-packages (0.31.0)\nRequirement already satisfied: importlib-metadata in /opt/conda/lib/python3.10/site-packages (from diffusers) (7.0.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from diffusers) (3.15.1)\nRequirement already satisfied: huggingface-hub>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from diffusers) (0.26.2)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from diffusers) (1.26.4)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from diffusers) (2024.5.15)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from diffusers) (2.32.3)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from diffusers) (0.4.5)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from diffusers) (10.3.0)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.23.2->diffusers) (2024.9.0)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.23.2->diffusers) (24.2)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.23.2->diffusers) (6.0.2)\nRequirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.23.2->diffusers) (4.66.4)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.23.2->diffusers) (4.12.2)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata->diffusers) (3.19.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->diffusers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->diffusers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->diffusers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->diffusers) (2024.6.2)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0+cpu)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.1)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.9.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nRequirement already satisfied: editor in /opt/conda/lib/python3.10/site-packages (1.6.6)\nRequirement already satisfied: runs in /opt/conda/lib/python3.10/site-packages (from editor) (1.2.2)\nRequirement already satisfied: xmod in /opt/conda/lib/python3.10/site-packages (from editor) (1.8.1)\n\u001b[31mERROR: Could not find a version that satisfies the requirement dalle (from versions: none)\u001b[0m\u001b[31m\n\u001b[0m\u001b[31mERROR: No matching distribution found for dalle\u001b[0m\u001b[31m\n\u001b[0m","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport numpy as np\nimport os\nimport torch\nfrom transformers import AutoModelForSeq2SeqLM, AutoTokenizer, AutoModelForTokenClassification\nimport gtts  # For text-to-speech audio generation\n# from langchain_community import LangChain  # For implementing langchain and other NLP tasks\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T20:58:51.915086Z","iopub.execute_input":"2024-12-03T20:58:51.915505Z","iopub.status.idle":"2024-12-03T20:58:51.922088Z","shell.execute_reply.started":"2024-12-03T20:58:51.915470Z","shell.execute_reply":"2024-12-03T20:58:51.920577Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"def nlp_pipeline(text, data):\n    # Use T5 for summarization\n    summary_model = AutoModelForSeq2SeqLM.from_pretrained('t5-base')\n    summary_tokenizer = AutoTokenizer.from_pretrained('t5-base')\n    \n    # Prepare input\n    input_text = f\"summarize: {text} {data}\"\n    inputs = summary_tokenizer.encode(input_text, return_tensors='pt', max_length=512, truncation=True)\n    \n    # Generate summary\n    outputs = summary_model.generate(inputs, max_length=100)\n    summary_text = summary_tokenizer.decode(outputs[0], skip_special_tokens=True)\n    \n    # Extract percentages and categories using simpler regex patterns\n    import re\n    percentages = [int(x.strip('%')) for x in re.findall(r'\\d+%', text)]\n    words = text.split()\n    categories = []\n    \n    # Find words after \"use\" or \"uses\"\n    for i, word in enumerate(words):\n        if word.lower() in ['use', 'uses'] and i + 1 < len(words):\n            categories.append(words[i + 1])\n    \n    if not percentages or not categories:\n        percentages = [100]\n        categories = ['Summary']\n    \n    # Generate audio\n    tts = gtts.gTTS(summary_text, lang='en')\n    tts.save('summary_audio.mp3')\n    \n    return {\n        'categories': categories,\n        'values': percentages,\n        'text': summary_text\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T21:23:23.256964Z","iopub.execute_input":"2024-12-03T21:23:23.258048Z","iopub.status.idle":"2024-12-03T21:23:23.267892Z","shell.execute_reply.started":"2024-12-03T21:23:23.258000Z","shell.execute_reply":"2024-12-03T21:23:23.266328Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"# Define a function to generate infographics from CSV file with dynamic visualization selection\ndef generate_infographics_from_csv(csv_file):\n    # Read the CSV file with error handling for UnicodeDecodeError\n    try:\n        df = pd.read_csv(csv_file)\n    except UnicodeDecodeError:\n        df = pd.read_csv(csv_file, encoding='utf-8', errors='replace')\n    \n    # Determine the best visualization method based on data characteristics\n    if len(df) <= 10:  # For small datasets, a pie chart is suitable\n        visualization_method = 'pie_chart'\n    elif len(df) <= 50:  # For medium-sized datasets, a bar chart is suitable\n        visualization_method = 'bar_chart'\n    elif len(df) <= 100:  # For larger datasets, a line chart is suitable\n        visualization_method = 'line_chart'\n    else:  # For even larger datasets, consider using more advanced visualization tools or libraries\n        visualization_method = 'advanced_visualization'\n    \n    # Generate the selected visualization\n    if visualization_method == 'bar_chart':\n        fig, ax = plt.subplots()\n        ax.bar(df['Category'], df['Value'])\n        ax.set_title('Bar Chart')\n        ax.set_xlabel('Category')\n        ax.set_ylabel('Value')\n        plt.savefig('bar_chart.png')\n    elif visualization_method == 'pie_chart':\n        fig, ax = plt.subplots()\n        ax.pie(df['Value'], labels=df['Category'], autopct='%1.1f%%')\n        ax.set_title('Pie Chart')\n        ax.axis('equal')\n        plt.savefig('pie_chart.png')\n    elif visualization_method == 'line_chart':\n        fig, ax = plt.subplots()\n        ax.plot(df['Category'], df['Value'])\n        ax.set_title('Line Chart')\n        ax.set_xlabel('Category')\n        ax.set_ylabel('Value')\n        plt.savefig('line_chart.png')\n    elif visualization_method == 'advanced_visualization':\n        # For larger datasets, consider using more advanced visualization tools or libraries\n        # such as seaborn, plotly, or bokeh to handle large datasets and process the data\n        # Example using seaborn\n        import seaborn as sns\n        sns.set_theme(style=\"whitegrid\")\n        sns.barplot(data=df, x='Category', y='Value')\n        plt.title('Advanced Visualization')\n        plt.xlabel('Category')\n        plt.ylabel('Value')\n        plt.savefig('advanced_visualization.png')\n    \n    # Save the generated image\n    plt.savefig(f'{visualization_method}.png')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:11:58.216371Z","iopub.execute_input":"2024-12-03T22:11:58.216899Z","iopub.status.idle":"2024-12-03T22:11:58.231214Z","shell.execute_reply.started":"2024-12-03T22:11:58.216856Z","shell.execute_reply":"2024-12-03T22:11:58.229971Z"}},"outputs":[],"execution_count":94},{"cell_type":"code","source":"# Define a function to generate infographics from custom prompt and CSV file\ndef generate_infographics_from_prompt_and_csv(prompt, csv_file):\n    # Use the NLP pipeline to process the prompt and CSV file\n    summary = nlp_pipeline(prompt, pd.read_csv(csv_file)['Category'].tolist())\n    \n    # Integrate with AI models like GPT-3 for more dynamic and interactive visualizations\n    # Assuming GPT-3 is available and can generate images based on the summary\n    # For demonstration, we'll use matplotlib for a simple visualization\n    fig, ax = plt.subplots()\n    ax.bar(summary['categories'], summary['values'])\n    ax.set_title('Infographics from CSV and Prompt')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Value')\n    plt.savefig('infographics_image.png')\n    images = ['infographics_image.png']\n    \n    # Create a video from the images using moviepy\n    from moviepy.editor import ImageSequenceClip\n    clip = ImageSequenceClip(images, fps=1)\n    clip.write_videofile('infographics_video.mp4')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T21:23:27.310533Z","iopub.execute_input":"2024-12-03T21:23:27.310945Z","iopub.status.idle":"2024-12-03T21:23:27.318985Z","shell.execute_reply.started":"2024-12-03T21:23:27.310912Z","shell.execute_reply":"2024-12-03T21:23:27.317159Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"def create_animated_gif(text):\n    import os\n    from PIL import Image\n    import matplotlib.pyplot as plt\n    \n    # Use the NLP pipeline to process the text\n    summary = nlp_pipeline(text, '')\n    categories = summary['categories']\n    values = summary['values']\n    \n    # Create frames directory\n    frames_dir = 'animation_frames'\n    os.makedirs(frames_dir, exist_ok=True)\n    \n    def create_frame(frame_number, value_multiplier, categories=categories, values=values):  # Pass values as parameter\n        fig, ax = plt.subplots(figsize=(12, 7))\n        \n        # Calculate current height of bars\n        current_values = [v * value_multiplier for v in values]\n        \n        # Create bars with current height\n        bars = ax.bar(categories, current_values, color='skyblue')\n        \n        # Styling\n        ax.set_title('Market Share Analysis', fontsize=20, pad=20)\n        ax.set_xlabel('Brands', fontsize=14)\n        ax.set_ylabel('Percentage (%)', fontsize=14)\n        ax.set_ylim(0, max(values) * 1.2)\n        \n        # Add value labels\n        for bar, value in zip(bars, current_values):\n            if value > 0:\n                height = bar.get_height()\n                ax.text(bar.get_x() + bar.get_width()/2., height,\n                       f'{int(value)}%',\n                       ha='center', va='bottom', fontsize=12)\n        \n        ax.grid(True, axis='y', linestyle='--', alpha=0.7)\n        plt.tight_layout()\n        \n        # Save frame\n        frame_path = os.path.join(frames_dir, f'frame_{frame_number:03d}.png')\n        plt.savefig(frame_path, dpi=300, bbox_inches='tight')\n        plt.close()\n        return frame_path\n    \n    # Generate frames\n    frames = []\n    num_frames = 20  # Number of frames for animation\n    \n    print(\"Generating frames...\")\n    for i in range(num_frames + 1):\n        multiplier = i / num_frames\n        frame_path = create_frame(i, multiplier)\n        frames.append(frame_path)\n    \n    # Create GIF\n    print(\"Creating GIF...\")\n    images = [Image.open(f) for f in frames]\n    \n    gif_path = 'animated_infographic.gif'\n    images[0].save(\n        gif_path,\n        save_all=True,\n        append_images=images[1:],\n        duration=100,  # 100ms between frames\n        loop=0\n    )\n    \n    # Clean up frames\n    for frame in frames:\n        os.remove(frame)\n    os.rmdir(frames_dir)\n    \n    print(f\"Animation saved as GIF: {gif_path}\")\n    return gif_path","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T21:36:42.849141Z","iopub.execute_input":"2024-12-03T21:36:42.849613Z","iopub.status.idle":"2024-12-03T21:36:42.863376Z","shell.execute_reply.started":"2024-12-03T21:36:42.849576Z","shell.execute_reply":"2024-12-03T21:36:42.861714Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"def create_animated_gif(text):\n    import os\n    from PIL import Image\n    import matplotlib.pyplot as plt\n    import shutil  # For directory removal\n    \n    # Use the NLP pipeline to process the text\n    summary = nlp_pipeline(text, '')\n    categories = summary['categories']\n    values = summary['values']\n    \n    # Create frames directory\n    frames_dir = 'animation_frames'\n    if os.path.exists(frames_dir):\n        shutil.rmtree(frames_dir)  # Remove directory if it exists\n    os.makedirs(frames_dir)\n    \n    def create_frame(frame_number, value_multiplier, categories=categories, values=values):\n        fig, ax = plt.subplots(figsize=(12, 7))\n        \n        # Calculate current height of bars\n        current_values = [v * value_multiplier for v in values]\n        \n        # Create bars with current height\n        bars = ax.bar(categories, current_values, color='skyblue')\n        \n        # Styling\n        ax.set_title('Market Share Analysis', fontsize=20, pad=20)\n        ax.set_xlabel('Brands', fontsize=14)\n        ax.set_ylabel('Percentage (%)', fontsize=14)\n        ax.set_ylim(0, max(values) * 1.2)\n        \n        # Add value labels\n        for bar, value in zip(bars, current_values):\n            if value > 0:\n                height = bar.get_height()\n                ax.text(bar.get_x() + bar.get_width()/2., height,\n                       f'{int(value)}%',\n                       ha='center', va='bottom', fontsize=12)\n        \n        ax.grid(True, axis='y', linestyle='--', alpha=0.7)\n        plt.tight_layout()\n        \n        # Save frame\n        frame_path = os.path.join(frames_dir, f'frame_{frame_number:03d}.png')\n        plt.savefig(frame_path, dpi=300, bbox_inches='tight')\n        plt.close()\n        return frame_path\n    \n    # Generate frames\n    frames = []\n    num_frames = 20  # Number of frames for animation\n    \n    print(\"Generating frames...\")\n    for i in range(num_frames + 1):\n        multiplier = i / num_frames\n        frame_path = create_frame(i, multiplier)\n        frames.append(frame_path)\n    \n    # Create GIF\n    print(\"Creating GIF...\")\n    images = [Image.open(f) for f in frames]\n    \n    gif_path = 'animated_infographic.gif'\n    images[0].save(\n        gif_path,\n        save_all=True,\n        append_images=images[1:],\n        duration=100,  # 100ms between frames\n        loop=0\n    )\n    \n    # Clean up frames directory\n    try:\n        shutil.rmtree(frames_dir)\n        print(\"Cleanup completed successfully\")\n    except Exception as e:\n        print(f\"Cleanup error: {e}\")\n    \n    print(f\"Animation saved as GIF: {gif_path}\")\n    return gif_path","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T21:38:55.752496Z","iopub.execute_input":"2024-12-03T21:38:55.754097Z","iopub.status.idle":"2024-12-03T21:38:55.771352Z","shell.execute_reply.started":"2024-12-03T21:38:55.754026Z","shell.execute_reply":"2024-12-03T21:38:55.769446Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"\n\ndef create_detailed_infographic(text):\n    \"\"\"\n    Creates a static detailed infographic for data storytelling\n    \"\"\"\n    import matplotlib.pyplot as plt\n    \n    # Process text\n    summary = nlp_pipeline(text, '')\n    categories = summary['categories']\n    values = summary['values']\n    \n    # Create figure with subplots\n    fig = plt.figure(figsize=(15, 10))\n    \n    # Main bar plot\n    ax1 = plt.subplot2grid((2, 2), (0, 0), colspan=2)\n    bars = ax1.bar(categories, values, color='skyblue')\n    ax1.set_title('Market Share Distribution', fontsize=16)\n    ax1.set_ylabel('Percentage (%)')\n    \n    # Add value labels\n    for bar in bars:\n        height = bar.get_height()\n        ax1.text(bar.get_x() + bar.get_width()/2., height,\n                f'{int(height)}%',\n                ha='center', va='bottom')\n    \n    # Pie chart\n    ax2 = plt.subplot2grid((2, 2), (1, 0))\n    ax2.pie(values, labels=categories, autopct='%1.1f%%')\n    ax2.set_title('Market Share Proportion')\n    \n    # Additional insights text\n    ax3 = plt.subplot2grid((2, 2), (1, 1))\n    ax3.axis('off')\n    total = sum(values)\n    insights_text = f\"\"\"Key Insights:\n    \n    • Total market coverage: {total}%\n    • Leading brand: {categories[values.index(max(values))]}\n    • Market share gap: {max(values)-min(values)}%\n    \"\"\"\n    ax3.text(0, 0.5, insights_text, fontsize=12, va='center')\n    \n    plt.tight_layout()\n    \n    # Save high-quality image\n    output_path = 'detailed_infographic.png'\n    plt.savefig(output_path, dpi=300, bbox_inches='tight')\n    plt.close()\n    \n    print(f\"Detailed infographic saved as: {output_path}\")\n    return output_path\n    print(f\"Detailed infographic saved as: {output_path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T21:40:29.169462Z","iopub.execute_input":"2024-12-03T21:40:29.170042Z","iopub.status.idle":"2024-12-03T21:40:29.185677Z","shell.execute_reply.started":"2024-12-03T21:40:29.169998Z","shell.execute_reply":"2024-12-03T21:40:29.183627Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"def convert_gif_to_storytelling_video(gif_path, text):\n    \"\"\"\n    Converts a GIF into a storytelling video using imageio\n    \"\"\"\n    import os\n    from PIL import Image, ImageDraw, ImageFont\n    import numpy as np\n    import imageio\n    \n    # Process text for insights\n    summary = nlp_pipeline(text, '')\n    categories = summary['categories']\n    values = summary['values']\n    \n    def create_text_frame(text, size=(1920, 1080), bg_color='white'):\n        img = Image.new('RGB', size, color=bg_color)\n        draw = ImageDraw.Draw(img)\n        \n        try:\n            font = ImageFont.truetype(\"arial.ttf\", 60)\n        except:\n            font = ImageFont.load_default()\n        \n        # Get text bbox\n        bbox = draw.textbbox((0, 0), text, font=font)\n        text_width = bbox[2] - bbox[0]\n        text_height = bbox[3] - bbox[1]\n        \n        # Center text\n        x = (size[0] - text_width) // 2\n        y = (size[1] - text_height) // 2\n        \n        draw.text((x, y), text, fill='black' if bg_color == 'white' else 'white', font=font)\n        # Convert to RGB numpy array\n        return np.array(img.convert('RGB'))\n    \n    # Prepare frames\n    frames = []\n    fps = 30\n    \n    # 1. Title sequence (2 seconds)\n    title_frame = create_text_frame(\"Market Share Analysis\", bg_color='black')\n    for _ in range(2 * fps):\n        frames.append(title_frame)\n    \n    # 2. GIF sequence (4 seconds)\n    gif = Image.open(gif_path)\n    gif_frames = []\n    try:\n        while True:\n            frame = gif.copy()\n            # Resize frame and ensure RGB\n            frame = frame.convert('RGB').resize((1920, 1080), Image.LANCZOS)\n            # Convert to numpy array\n            frame_array = np.array(frame)\n            gif_frames.append(frame_array)\n            gif.seek(len(gif_frames))\n    except EOFError:\n        pass\n    \n    # Extend gif frames to 4 seconds\n    frames_needed = 4 * fps\n    while len(gif_frames) < frames_needed:\n        gif_frames.extend(gif_frames)\n    frames.extend(gif_frames[:frames_needed])\n    \n    # 3. Explanation sequence (4 seconds)\n    explanations = [\n        \"Analyzing market share data...\",\n        f\"Main competitor: {categories[values.index(max(values))]} leads with {max(values)}%\",\n        f\"Market gap analysis shows {max(values)-min(values)}% difference\",\n        f\"Total market coverage: {sum(values)}%\",\n        \"Generating insights and recommendations...\"\n    ]\n    \n    frames_per_explanation = int((4 * fps) / len(explanations))\n    for exp in explanations:\n        exp_frame = create_text_frame(exp)\n        for _ in range(frames_per_explanation):\n            frames.append(exp_frame)\n    \n    # Verify all frames have same shape and channels\n    frame_shape = frames[0].shape\n    frames = [frame.reshape(frame_shape) if frame.shape != frame_shape else frame \n             for frame in frames]\n    \n    # Save as MP4\n    output_path = 'data_storytelling_video.mp4'\n    \n    print(\"Writing video...\")\n    writer = imageio.get_writer(output_path, fps=fps)\n    for frame in frames:\n        writer.append_data(frame)\n    writer.close()\n    \n    print(f\"Data storytelling video saved as: {output_path}\")\n    return output_path","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:05:23.231166Z","iopub.execute_input":"2024-12-03T22:05:23.233478Z","iopub.status.idle":"2024-12-03T22:05:23.252111Z","shell.execute_reply.started":"2024-12-03T22:05:23.233374Z","shell.execute_reply":"2024-12-03T22:05:23.250667Z"}},"outputs":[],"execution_count":87},{"cell_type":"code","source":"# Create the animated GIF\ngif_path = create_animated_gif('20% users use iphone and 40% uses samsung')\n\n# Convert to storytelling video\nvideo_path = convert_gif_to_storytelling_video(gif_path, '20% users use iphone and 40% uses samsung')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:05:39.228015Z","iopub.execute_input":"2024-12-03T22:05:39.228645Z","iopub.status.idle":"2024-12-03T22:06:23.272583Z","shell.execute_reply.started":"2024-12-03T22:05:39.228593Z","shell.execute_reply":"2024-12-03T22:06:23.270659Z"}},"outputs":[{"name":"stdout","text":"Generating frames...\nCreating GIF...\nCleanup completed successfully\nAnimation saved as GIF: animated_infographic.gif\nWriting video...\n","output_type":"stream"},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Data storytelling video saved as: data_storytelling_video.mp4\n","output_type":"stream"}],"execution_count":88},{"cell_type":"code","source":"# # First create the animated GIF\n# gif_path = create_animated_gif('20% users use iphone and 40% uses samsung')\n\n# # Then convert it to storytelling video\n# video_path = convert_gif_to_storytelling_video(gif_path, '20% users use iphone and 40% uses samsung')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:18:09.777782Z","iopub.execute_input":"2024-12-03T22:18:09.778432Z","iopub.status.idle":"2024-12-03T22:18:09.785323Z","shell.execute_reply.started":"2024-12-03T22:18:09.778363Z","shell.execute_reply":"2024-12-03T22:18:09.783773Z"}},"outputs":[],"execution_count":96},{"cell_type":"code","source":"# print(output_path)\n# print(f\"Detailed infographic saved as: {output_path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T21:40:44.616687Z","iopub.execute_input":"2024-12-03T21:40:44.617112Z","iopub.status.idle":"2024-12-03T21:40:44.623820Z","shell.execute_reply.started":"2024-12-03T21:40:44.617076Z","shell.execute_reply":"2024-12-03T21:40:44.621771Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"\n\n# # Test the functions\n# gif_path = create_animated_gif('20% users use iphone and 40% uses samsung')\n# detailed_path = create_detailed_infographic('20% users use iphone and 40% uses samsung')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:18:12.975211Z","iopub.execute_input":"2024-12-03T22:18:12.975737Z","iopub.status.idle":"2024-12-03T22:18:12.981788Z","shell.execute_reply.started":"2024-12-03T22:18:12.975696Z","shell.execute_reply":"2024-12-03T22:18:12.980255Z"}},"outputs":[],"execution_count":97},{"cell_type":"code","source":"# # Test the function\n# gif_path, video_path = generate_animated_infographics('20% users use iphone and 40% uses samsung')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:18:15.456579Z","iopub.execute_input":"2024-12-03T22:18:15.457096Z","iopub.status.idle":"2024-12-03T22:18:15.463975Z","shell.execute_reply.started":"2024-12-03T22:18:15.457054Z","shell.execute_reply":"2024-12-03T22:18:15.462323Z"}},"outputs":[],"execution_count":98},{"cell_type":"code","source":"# generate_infographics_from_csv('/kaggle/input/sample-sales-data/sales_data_sample.csv')\n# # generate_infographics_from_prompt_and_csv('This is a custom prompt', 'data.csv')\n# # generate_high_quality_infographics_from_text('20% users use iphone and 40% uses samsung')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T22:18:18.311018Z","iopub.execute_input":"2024-12-03T22:18:18.311549Z","iopub.status.idle":"2024-12-03T22:18:18.318167Z","shell.execute_reply.started":"2024-12-03T22:18:18.311511Z","shell.execute_reply":"2024-12-03T22:18:18.316477Z"}},"outputs":[],"execution_count":99},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}